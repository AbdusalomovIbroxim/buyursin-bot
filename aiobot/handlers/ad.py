import asyncio
import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import InputMediaPhoto
from aiobot.buttons.keyboards.reply import main_keyboard, lang_keyboard, size_category_keyboard, clothing_size_keyboard, photos_keyboard, condition_keyboard
from aiobot.models import Ads, Users
from aiobot.texts import TEXTS
from aiobot.states import AdForm, Register

router = Router()
media_groups_cache = {}


# üì¢ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router.message(Command("my_ads"))
async def my_ads(message: Message, state: FSMContext):
    
    user = await Users.get(user_id=message.from_user.id)
    if not user:
        await message.answer(TEXTS["welcome"]["ru"], reply_markup=lang_keyboard())
        await state.set_state(Register.language)
        return

    ads = await Ads.filter(user=user)
    if not ads:
        await message.answer({
            "ru": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
            "uz": "Sizda hali e'lonlar yo'q.",
            "en": "You don‚Äôt have any ads yet."
        }[user.lang])
        return

    text = {
        "ru": "üìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n",
        "uz": "üìã Sizning e'lonlaringiz:\n\n",
        "en": "üìã Your ads:\n\n"
    }[user.lang]

    for ad in ads:
        text += f"‚Ä¢ {ad.title} ‚Äî {ad.price} UZS\n"
    await message.answer(text, reply_markup=main_keyboard(user.lang))


# üì¢ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
# @router.message(Command("add_ad"))
@router.message(
    F.text.in_([
        TEXTS["add_ad"]["ru"],
        TEXTS["add_ad"]["uz"],
        TEXTS["add_ad"]["en"]
    ])
)
async def add_ad(message: Message, state: FSMContext):
    user = await Users.get(user_id=message.from_user.id)
    if not user:
        await message.answer(TEXTS["welcome"]["ru"], reply_markup=lang_keyboard())
        await state.set_state(Register.language)
        return

    await message.answer(TEXTS["ad_title"][user.lang])
    await state.set_state(AdForm.title)


@router.message(AdForm.title, F.text)
async def ad_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    user = await Users.get(user_id=message.from_user.id)
    await message.answer(TEXTS["ad_price"][user.lang])
    await state.set_state(AdForm.price)


import re

@router.message(AdForm.price, F.text)
async def ad_price(message: Message, state: FSMContext):
    user = await Users.get(user_id=message.from_user.id)
    lang = user.lang

    text = message.text.strip().lower()
    price = None

    # ‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ä–∞–∑—É –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º
    if "-" in text:
        await message.answer({
            "ru": "‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.",
            "uz": "‚ùå Narx manfiy bo‚Äòlishi mumkin emas.",
            "en": "‚ùå Price cannot be negative."
        }[lang])
        return

    # –§–æ—Ä–º–∞—Ç—ã: —á–∏—Å–ª–æ, —á–∏—Å–ª–æ + som/sum/$, —á–∏—Å–ª–æ + k/–∫
    match = re.match(r"^(\d+)(k|–∫|som|sum|\$)?$", text)
    if not match:
        await message.answer({
            "ru": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü—Ä–∏–º–µ—Ä—ã: 100000 som, 200$, 100k",
            "uz": "‚ùå Narx formati noto‚Äòg‚Äòri. Misollar: 100000 som, 200$, 100k",
            "en": "‚ùå Invalid price format. Examples: 100000 som, 200$, 100k"
        }[lang])
        return

    amount = int(match.group(1))
    suffix = match.group(2)

    # # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
    # if suffix in ("k", "–∫"):   # 100k ‚Üí 100000
    #     price = amount * 1000
    # elif suffix == "$":        # 200$ ‚Üí –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—É–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, * 12500)
    #     price = amount * 12500
    # else:                      # som / sum / –Ω–∏—á–µ–≥–æ ‚Üí —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    price = amount

    # –õ–∏–º–∏—Ç
    if price > 10_000_000:
        await message.answer({
            "ru": "‚ùå –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ 10 –º–ª–Ω.",
            "uz": "‚ùå Juda katta narx. 10 mln dan kichikroq summani kiriting.",
            "en": "‚ùå Price too high. Enter less than 10M."
        }[lang])
        return

    await state.update_data(price=price)
    await message.answer(TEXTS["ad_size_category"][lang], reply_markup=size_category_keyboard(lang))
    await state.set_state(AdForm.size_category)


@router.message(AdForm.size_category, F.text)
async def ad_size_category(message: Message, state: FSMContext):
    await state.update_data(size_category=message.text)
    user = await Users.get(user_id=message.from_user.id)
    await message.answer(TEXTS["ad_size"][user.lang], reply_markup=clothing_size_keyboard())
    await state.set_state(AdForm.size)


@router.message(AdForm.size, F.text)
async def ad_size(message: Message, state: FSMContext):
    await state.update_data(size=message.text)
    user = await Users.get(user_id=message.from_user.id)
    await message.answer(TEXTS["ad_condition"][user.lang], reply_markup=condition_keyboard(user.lang))
    await state.set_state(AdForm.condition)


@router.message(AdForm.condition, F.text)
async def ad_condition(message: Message, state: FSMContext):
    await state.update_data(condition=message.text)
    user = await Users.get(user_id=message.from_user.id)
    await message.answer(TEXTS["ad_photos"][user.lang], reply_markup=photos_keyboard(user.lang))
    await state.set_state(AdForm.photos)


@router.message(AdForm.photos, F.photo)
async def ad_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞
    if message.media_group_id:
        group_id = message.media_group_id

        # –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à
        if group_id not in media_groups_cache:
            media_groups_cache[group_id] = []

        media_groups_cache[group_id].append(message.photo[-1].file_id)

        # –∂–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ –ø—Ä–∏–¥—É—Ç –≤—Å–µ —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–∞
        await asyncio.sleep(0.5)

        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –∫–æ–≥–¥–∞ –∞–ª—å–±–æ–º —É–∂–µ —Å–æ–±—Ä–∞–Ω
        if group_id in media_groups_cache:
            new_photos = media_groups_cache.pop(group_id)
            for p in new_photos:
                if len(photos) < 10:
                    photos.append(p)

            await state.update_data(photos=photos)
            await message.answer(
                f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ ({len(photos)}/{10}). "
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'."
            )
    else:
        # –æ–¥–∏–Ω–æ—á–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
        if len(photos) >= 10:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
            return

        photos.append(message.photo[-1].file_id)
        await state.update_data(photos=photos)

        await message.answer(
            f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ ({len(photos)}/{10}). "
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'."
        )


@router.message(AdForm.photos, F.text)
async def photos_done(message: Message, state: FSMContext):
    user = await Users.get(user_id=message.from_user.id)
    lang = user.lang
    done_text = TEXTS["photos_done"].get(lang, TEXTS["photos_done"]["ru"])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ —é–∑–µ—Ä –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    if message.text.strip() == done_text:
        data = await state.get_data()
        photos = data.get("photos", [])

        # –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        ad_text = (
            f"{TEXTS['ad_confirm'][lang]}\n\n"
            f"üìå <b>{TEXTS['field_title'][lang]}:</b> {data['title']}\n"
            f"üí∞ <b>{TEXTS['field_price'][lang]}:</b> {data['price']} UZS\n"
            f"üìè <b>{TEXTS['field_size'][lang]}:</b> {data['size']}\n"
            f"‚ö° <b>{TEXTS['field_condition'][lang]}:</b> {data['condition']}\n"
        )

        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
        if photos:
            media = [InputMediaPhoto(media=p) for p in photos[:10]]
            media[0].caption = ad_text  # —Ç–µ–∫—Å—Ç –∫ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–∫–µ
            await message.answer_media_group(media)
        else:
            await message.answer(ad_text)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
        confirm_text = {
            "ru": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ? (–î–∞ / –ù–µ—Ç)",
            "uz": "E'lonni yuborasizmi? (Ha / Yo'q)",
            "en": "Send the ad? (Yes / No)"
        }
        await message.answer(confirm_text[lang])
        await state.set_state(AdForm.confirm)
        
        
@router.message(AdForm.confirm, F.text.lower() == "–¥–∞")
async def ad_confirm(message: Message, state: FSMContext):
    data = await state.get_data()
    user = await Users.get(user_id=message.from_user.id)

    await Ads.create(
        user=user,
        title=data["title"],
        price=data["price"],
        size=data["size"],
        condition=data["condition"],
        photo=data.get("photo")
    )
    await message.answer(TEXTS["ad_sent"][user.lang], reply_markup=main_keyboard(user.lang))
    await state.clear()


# ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
# @router.message(Command("edit_ad"))
# async def edit_ad(message: Message, state: FSMContext):
#     user = await Users.get(user_id=message.from_user.id)
#     if not user:
#         await message.answer("‚ùå Not registered")
#         return

#     ads = await Ads.filter(user=user)
#     if not ads:
#         await message.answer({
#             "ru": "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
#             "uz": "Sizda tahrirlash uchun e'lonlar yo'q.",
#             "en": "You have no ads to edit."
#         }[user.lang])
#         return

#     text = {
#         "ru": "–í—ã–±–µ—Ä–∏—Ç–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
#         "uz": "Tahrirlash uchun e'lon ID sini tanlang:",
#         "en": "Choose an ad ID to edit:"
#     }[user.lang]

#     reply = "\n".join([f"{ad.id}: {ad.title}" for ad in ads])
#     await message.answer(f"{text}\n\n{reply}")

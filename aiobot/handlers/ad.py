import asyncio
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import InputMediaPhoto, CallbackQuery
from aiogram.utils.markdown import hlink
from aiobot.buttons.keyboards.reply import main_keyboard, lang_keyboard, size_category_keyboard, clothing_size_keyboard, photos_keyboard, condition_keyboard
from aiobot.buttons.keyboards.inline import admin_inline_keyboard, user_confirm_keyboard
from aiobot.models import Ads, Users
from aiobot.texts import TEXTS
from aiobot.states import AdForm, Register
from config import ADMIN_GROUP_ID
from dispatcher.dispatcher import bot

router = Router()
media_groups_cache = {}

CONFIRM_WORDS = {
    "yes": ["–¥–∞", "ha", "yes", "xa"],
    "no": ["–Ω–µ—Ç", "yo‚Äòq", "yoq", "no", "yo'q"]
}

def is_yes(text: str) -> bool:
    return text.lower() in CONFIRM_WORDS["yes"]

def is_no(text: str) -> bool:
    return text.lower() in CONFIRM_WORDS["no"]

# üì¢ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
# @router.message(Command("my_ads"))
# async def my_ads(message: Message, state: FSMContext):
    
#     user = await Users.get(user_id=message.from_user.id)
#     if not user:
#         await message.answer(TEXTS["welcome"]["ru"], reply_markup=lang_keyboard())
#         await state.set_state(Register.language)
#         return

#     ads = await Ads.filter(user=user)
#     if not ads:
#         await message.answer({
#             "ru": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
#             "uz": "Sizda hali e'lonlar yo'q.",
#             "en": "You don‚Äôt have any ads yet."
#         }[user.lang])
#         return

#     text = {
#         "ru": "üìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n",
#         "uz": "üìã Sizning e'lonlaringiz:\n\n",
#         "en": "üìã Your ads:\n\n"
#     }[user.lang]

#     for ad in ads:
#         text += f"‚Ä¢ {ad.title} ‚Äî {ad.price} UZS\n"
#     await message.answer(text, reply_markup=main_keyboard(user.lang))


# üì¢ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
# @router.message(Command("add_ad"))
@router.message(
    F.text.in_([
        TEXTS["add_ad"]["ru"],
        TEXTS["add_ad"]["uz"],
        TEXTS["add_ad"]["en"]
    ])
)
async def add_ad(message: Message, state: FSMContext):
    user = await Users.get(user_id=message.from_user.id)
    if not user:
        await message.answer(TEXTS["welcome"]["ru"], reply_markup=lang_keyboard())
        await state.set_state(Register.language)
        return

    await message.answer(TEXTS["ad_title"][user.lang])
    await state.set_state(AdForm.title)


@router.message(AdForm.title, F.text)
async def ad_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    user = await Users.get(user_id=message.from_user.id)
    await message.answer(TEXTS["ad_price"][user.lang])
    await state.set_state(AdForm.price)


import re

@router.message(AdForm.price, F.text)
async def ad_price(message: Message, state: FSMContext):
    user = await Users.get(user_id=message.from_user.id)
    lang = user.lang

    text = message.text.strip().lower()
    price = None

    # ‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ä–∞–∑—É –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º
    if "-" in text:
        await message.answer({
            "ru": "‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.",
            "uz": "‚ùå Narx manfiy bo‚Äòlishi mumkin emas.",
            "en": "‚ùå Price cannot be negative."
        }[lang])
        return

    # –§–æ—Ä–º–∞—Ç—ã: —á–∏—Å–ª–æ, —á–∏—Å–ª–æ + som/sum/$, —á–∏—Å–ª–æ + k/–∫
    match = re.match(r"^(\d+)(k|–∫|som|sum|\$)?$", text)
    if not match:
        await message.answer({
            "ru": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü—Ä–∏–º–µ—Ä—ã: 100000 som, 200$, 100k",
            "uz": "‚ùå Narx formati noto‚Äòg‚Äòri. Misollar: 100000 som, 200$, 100k",
            "en": "‚ùå Invalid price format. Examples: 100000 som, 200$, 100k"
        }[lang])
        return

    amount = int(match.group(1))
    suffix = match.group(2)

    # # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
    # if suffix in ("k", "–∫"):   # 100k ‚Üí 100000
    #     price = amount * 1000
    # elif suffix == "$":        # 200$ ‚Üí –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—É–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, * 12500)
    #     price = amount * 12500
    # else:                      # som / sum / –Ω–∏—á–µ–≥–æ ‚Üí —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    price = amount

    # –õ–∏–º–∏—Ç
    if price > 10_000_000:
        await message.answer({
            "ru": "‚ùå –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ 10 –º–ª–Ω.",
            "uz": "‚ùå Juda katta narx. 10 mln dan kichikroq summani kiriting.",
            "en": "‚ùå Price too high. Enter less than 10M."
        }[lang])
        return

    await state.update_data(price=price)
    await message.answer(TEXTS["ad_size_category"][lang], reply_markup=size_category_keyboard(lang))
    await state.set_state(AdForm.size_category)


@router.message(AdForm.size_category, F.text)
async def ad_size_category(message: Message, state: FSMContext):
    await state.update_data(size_category=message.text)
    user = await Users.get(user_id=message.from_user.id)
    await message.answer(TEXTS["ad_size"][user.lang], reply_markup=clothing_size_keyboard())
    await state.set_state(AdForm.size)


@router.message(AdForm.size, F.text)
async def ad_size(message: Message, state: FSMContext):
    await state.update_data(size=message.text)
    user = await Users.get(user_id=message.from_user.id)
    await message.answer(TEXTS["ad_condition"][user.lang], reply_markup=condition_keyboard(user.lang))
    await state.set_state(AdForm.condition)


@router.message(AdForm.condition, F.text)
async def ad_condition(message: Message, state: FSMContext):
    await state.update_data(condition=message.text)
    user = await Users.get(user_id=message.from_user.id)
    await message.answer(TEXTS["ad_photos"][user.lang], reply_markup=photos_keyboard(user.lang))
    await state.set_state(AdForm.photos)


@router.message(AdForm.photos, F.photo)
async def ad_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞
    if message.media_group_id:
        group_id = message.media_group_id

        # –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à
        if group_id not in media_groups_cache:
            media_groups_cache[group_id] = []

        media_groups_cache[group_id].append(message.photo[-1].file_id)

        # –∂–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ –ø—Ä–∏–¥—É—Ç –≤—Å–µ —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–∞
        await asyncio.sleep(0.5)

        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –∫–æ–≥–¥–∞ –∞–ª—å–±–æ–º —É–∂–µ —Å–æ–±—Ä–∞–Ω
        if group_id in media_groups_cache:
            new_photos = media_groups_cache.pop(group_id)
            for p in new_photos:
                if len(photos) < 10:
                    photos.append(p)

            await state.update_data(photos=photos)
            await message.answer(
                f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ ({len(photos)}/{10}). "
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'."
            )
    else:
        # –æ–¥–∏–Ω–æ—á–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
        if len(photos) >= 10:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
            return

        photos.append(message.photo[-1].file_id)
        await state.update_data(photos=photos)

        await message.answer(
            f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ ({len(photos)}/{10}). "
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'."
        )


@router.message(AdForm.photos, F.text)
async def photos_done(message: Message, state: FSMContext):
    user = await Users.get(user_id=message.from_user.id)
    lang = user.lang
    done_text = TEXTS["photos_done"].get(lang, TEXTS["photos_done"]["ru"])
    data = await state.get_data()

    photos = data.get("photos", [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ —é–∑–µ—Ä –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    if message.text.strip() == done_text:
        if not photos:
            await message.answer("‚ùå –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
            return


        # –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        ad_text = (
            f"{TEXTS['ad_confirm'][lang]}\n\n"
            f"üìå {TEXTS['field_title'][lang]}: {data['title']}\n"
            f"üí∞ {TEXTS['field_price'][lang]}: {data['price']} UZS\n"
            f"üìè {TEXTS['field_size'][lang]}: {data['size']}\n"
            f"‚ö° {TEXTS['field_condition'][lang]}: {data['condition']}\n"
        )

        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
        if photos:
            media = [InputMediaPhoto(media=p) for p in photos[:10]]
            media[0].caption = ad_text  # —Ç–µ–∫—Å—Ç –∫ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–∫–µ
            await message.answer_media_group(media, )
        else:
            await message.answer(ad_text)
        
        confirm_texts = {
            "ru": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ, –≤—Å—ë –≤–µ—Ä–Ω–æ?",
            "uz": "Ma‚Äôlumotlarni tekshiring, hammasi to‚Äòg‚Äòri?",
            "en": "Check the data, everything correct?"
        }

        # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ç–æ
        await bot.send_message(
            user.user_id,
            text=confirm_texts.get(user.lang, confirm_texts["ru"]),
            reply_markup=user_confirm_keyboard(user.lang)
        )

        await state.set_state(AdForm.confirm)
        

@router.callback_query(lambda c: c.data and c.data.startswith("user_confirm_"))
async def ad_confirm(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = await Users.get(user_id=query.from_user.id)
    lang = user.lang

    if query.data == "user_confirm_no":
        await query.message.edit_text(TEXTS["ad_cancel"][lang], reply_markup=None)
        await state.clear()
        return

    if query.data == "user_confirm_yes":
        ad = await Ads.create(
            user_id=user.user_id,
            title=data["title"],
            price=data["price"],
            size=data["size"],
            condition=data["condition"],
            photos=",".join(data.get("photos", [])) if data.get("photos") else None
        )

        await bot.send_message(user.user_id, TEXTS["ad_sent"][lang], reply_markup=main_keyboard(lang))

        ad_text = (
            f"üìù –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad.pk}\n\n"
            f"üìå {TEXTS['field_title'][lang]}: {data['title']}\n"
            f"üí∞ {TEXTS['field_price'][lang]}: {data['price']} UZS\n"
            f"üìè {TEXTS['field_size'][lang]}: {data['size']}\n"
            f"‚ö° {TEXTS['field_condition'][lang]}: {data['condition']}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {hlink(user.full_name, f'tg://user?id={user.user_id}')}\n"
            f"üìû: {user.phone_number}\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º:"
        )

        if data.get("photos"):
            media = []
            for i, file_id in enumerate(data["photos"]):
                if i == 0:
                    media.append({
                        "type": "photo",
                        "media": file_id,
                        "caption": ad_text,
                        "parse_mode": "HTML"
                    })
                else:
                    media.append({"type": "photo", "media": file_id})

            await bot.send_media_group(chat_id=ADMIN_GROUP_ID, media=media)
            # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await bot.send_message(chat_id=ADMIN_GROUP_ID, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_inline_keyboard(ad.pk))
        else:
            await bot.send_message(chat_id=ADMIN_GROUP_ID, text=ad_text, parse_mode="HTML", reply_markup=admin_inline_keyboard(ad.pk))

        await state.clear()
        return

    await bot.send_message(user.user_id, TEXTS["ad_confirm_repeat"][lang])


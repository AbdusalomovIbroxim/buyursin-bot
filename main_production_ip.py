from dotenv import load_dotenv
import aiobot.handlers.commands as commands
import aiobot.handlers.user as user
import aiobot.handlers.ad as ad
import aiobot.handlers.admin as admin
import asyncio
import logging
import requests
import socket
from aiohttp import web
from dispatcher.dispatcher import dis, bot
from aiobot.database import db
from network_config import setup_network_logging, get_polling_settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_network_logging()

load_dotenv()

dis.include_router(commands.router)
dis.include_router(ad.router)
dis.include_router(user.router)
dis.include_router(admin.router)

def get_free_port():
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(('', 0))
        s.listen(1)
        port = s.getsockname()[1]
    return port

def get_public_ip():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π IP –∞–¥—Ä–µ—Å"""
    try:
        response = requests.get('https://api.ipify.org', timeout=5)
        return response.text
    except:
        return None

async def on_startup():
    await db.init()
    await db.create_all()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π IP
    public_ip = get_public_ip()
    if public_ip:
        logger.info(f"Public IP detected: {public_ip}")
        print(f"üåê –ü—É–±–ª–∏—á–Ω—ã–π IP: {public_ip}")
    else:
        logger.warning("Could not detect public IP")
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π IP")
        return False
    
    return True

async def on_shutdown():
    # –£–¥–∞–ª—è–µ–º webhook –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    try:
        await bot.delete_webhook()
        logger.info("Webhook removed")
    except:
        pass

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
    if request.match_info.get('token') == bot.token:
        update = await request.json()
        await dis.feed_webhook_update(bot, update)
        return web.Response()
    else:
        return web.Response(status=403)

def try_webhook_mode():
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å webhook —Ä–µ–∂–∏–º"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
        port = get_free_port()
        print(f"üîç –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: {port}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = web.Application()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è webhook
        app.router.add_post("/webhook/{token}", webhook_handler)
        app.router.add_get("/", lambda r: web.Response(text="Bot is running!"))
        app.router.add_get("/status", lambda r: web.Response(text="Bot is online!"))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å–∫–∞
        web.run_app(
            app,
            host="0.0.0.0",
            port=port,
        )
        return True
    except Exception as e:
        logger.error(f"Webhook mode failed: {e}")
        return False

def polling_mode():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç polling —Ä–µ–∂–∏–º"""
    print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ polling —Ä–µ–∂–∏–º...")
    
    async def main():
        await on_startup()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ polling
        polling_settings = get_polling_settings()
        
        print("[INFO] Bot started in polling mode (fallback)")
        print("[INFO] Using enhanced error handling and connection settings")
        
        try:
            await dis.start_polling(bot, **polling_settings)
        except Exception as e:
            logger.error(f"Critical error in polling: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
            await asyncio.sleep(5)
            await main()

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n[INFO] Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        print(f"[ERROR] Bot crashed: {e}")

if __name__ == '__main__':
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ...")
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º startup
        startup_success = asyncio.run(on_startup())
        
        if not startup_success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π IP")
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ polling —Ä–µ–∂–∏–º...")
            polling_mode()
            exit()
        
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Telegram —Ç—Ä–µ–±—É–µ—Ç HTTPS –¥–ª—è webhook!")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling —Ä–µ–∂–∏–º –±–µ–∑ –¥–æ–º–µ–Ω–∞")
        print()
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n1. Polling (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n2. Webhook (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)\n–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()
        
        if choice == "1" or choice == "":
            polling_mode()
        else:
            print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook —Ä–µ–∂–∏–º–∞...")
            if not try_webhook_mode():
                print("‚ùå Webhook —Ä–µ–∂–∏–º –Ω–µ —É–¥–∞–ª—Å—è")
                print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ polling —Ä–µ–∂–∏–º...")
                polling_mode()
                
    except KeyboardInterrupt:
        print("\n[INFO] Bot stopped by user")
        asyncio.run(on_shutdown())
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        print(f"[ERROR] Bot crashed: {e}")
        asyncio.run(on_shutdown()) 